version: "3.8"
services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.labels.type == manager
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
    restart: always

  redis:
    image: redis:alpine
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.labels.type == manager
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 3
    restart: always

  worker:
    image: worker:latest
    environment:
      DB_SERVER: db
      REDIS_HOST: redis
    networks:
      - app-net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == worker
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - db
      - redis

  vote:
    image: vote:latest
    ports:
      - "5000:80"
    environment:
      REDIS_HOST: redis
    networks:
      - app-net
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.labels.type == worker
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - redis

  result:
    image: result:latest
    ports:
      - "5001:80"
    environment:
      DB_SERVER: db
      REDIS_HOST: redis
    networks:
      - app-net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == worker
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - db
      - redis

networks:
  app-net:
    external: true
