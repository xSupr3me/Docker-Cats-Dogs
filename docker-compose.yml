services:
  db:
    image: postgres:17.2-alpine
    env_file: .env
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend-net
    deploy:
      placement:
        constraints:
          - node.labels.type == manager
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.2-alpine
    networks:
      - backend-net
      - middleware-net
    volumes:
      - redis_data:/data
    deploy:
      placement:
        constraints:
          - node.labels.type == manager
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  worker:
    image: worker:latest
    environment:
      DB_SERVER: postgres  # Modifié pour correspondre au nom du service
      REDIS_HOST: redis
    networks:
      - backend-net
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1  # Ajouté pour limiter à 1 replica par nœud
        constraints:
          - node.labels.type == worker
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "pgrep", "python"]
      interval: 10s
      timeout: 5s
      retries: 3

  vote:
    image: vote:latest
    ports:
      - "8080:8080"  # Changé de 5000:80 à 8080:8080
    environment:
      REDIS_HOST: redis
    networks:
      - frontend-net
      - middleware-net
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1  # Ajouté pour limiter à 1 replica par nœud
        constraints:
          - node.labels.type == worker
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3

  result:
    image: result:latest
    ports:
      - "8888:8888"  # Changé de 5001:80 à 8888:8888
    environment:
      DB_SERVER: db
      REDIS_HOST: redis
    networks:
      - frontend-net
      - middleware-net
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1  # Ajouté pour limiter à 1 replica par nœud
        constraints:
          - node.labels.type == worker
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  frontend-net:
    driver: overlay
    driver_opts:
      encrypted: "true"
  backend-net:
    driver: overlay
    driver_opts:
      encrypted: "true"
    internal: true  # Pas d'accès externe
  middleware-net:
    driver: overlay
    driver_opts:
      encrypted: "true"
    internal: true  # Pas d'accès externe
